on:
  push:
#    branches:
#      - main
#      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Save cache (node_modules)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
      - run: npm run build

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [ chrome, edge ]
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Restore cache (node_modules)
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: cypress-io/github-action@v6
        with:
          install: false
          start: npm run dev
          browser: ${{ matrix.browser }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.browser }}
          path: cypress/videos
          retention-days: 5
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 5

#  deploy:
#    runs-on: ubuntu-latest
#    needs:
#      - test
#    steps:
#      - uses: appleboy/ssh-action@v1
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            export NVM_DIR="$HOME/.nvm"
#            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#            cd cda242-next
#            git pull
#            npm install
#            npm run build
#            pm2 restart npm

  build-push-docker:
    runs-on: ubuntu-latest
    # needs: [test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: next
          tags: ghcr.io/alexispe/cda242-next/next:${{ github.ref_name }}

  deploy-docker-prod:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    environment:
      name: prod
      url: http://${{ secrets.SSH_HOST }}/
    needs:
      - build-push-docker
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd prod
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml up -d
            

  deploy-docker-test:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'develop' }}
    environment:
      name: test
      url: http://${{ secrets.SSH_HOST }}:3000
    needs:
      - build-push-docker
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd test
            sudo docker compose -f docker-compose.test.yml pull
            sudo docker compose -f docker-compose.test.yml up -d




